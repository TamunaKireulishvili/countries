{"ast":null,"code":"var _jsxFileName = \"/Users/Tamo/Desktop/rest-countries/rest-countries/src/regions/Regions.jsx\",\n  _s = $RefreshSig$();\nimport { data } from '../data';\nimport { Search } from '../search/Search';\nimport { Filter } from '../filter/Filter';\nimport { States } from '../states/States';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Regions = _ref => {\n  _s();\n  let {\n    DarkMode\n  } = _ref;\n  const [country, setCountry] = useState(data);\n  const [searchCountry, setSearchCountry] = useState('');\n  const [Select, setSelect] = useState(\"\");\n  useEffect(() => {\n    if (Select === \"All\") {\n      setCountry(data.filter(country => country.name.toLowerCase().includes(searchCountry.toLowerCase())));\n    } else setCountry(data.filter(country => country.name.toLowerCase().includes(searchCountry.toLowerCase())).filter(country => country.region.includes(Select)));\n  }, [searchCountry, Select]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: DarkMode ? \"regions-container dark-regions-container\" : \"regions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: DarkMode ? \"search-filter-container dark-search-filter-container\" : \"search-filter-container\",\n      children: [/*#__PURE__*/_jsxDEV(Search, {\n        setSearchCountry: setSearchCountry,\n        DarkMode: DarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(Filter, {\n        setFilterContainer: setSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: DarkMode ? \"states-wraper states-wraper-dark\" : \"states-wraper\",\n      children: country.map(country => {\n        return /*#__PURE__*/_jsxDEV(States, {\n          country: country,\n          DarkMode: DarkMode\n        }, country.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_s(Regions, \"XGipB0Oha0ih4UBU+b9dE149HWA=\");\n_c = Regions;\nvar _c;\n$RefreshReg$(_c, \"Regions\");","map":{"version":3,"names":["data","Search","Filter","States","useEffect","useState","Regions","DarkMode","country","setCountry","searchCountry","setSearchCountry","Select","setSelect","filter","name","toLowerCase","includes","region","map"],"sources":["/Users/Tamo/Desktop/rest-countries/rest-countries/src/regions/Regions.jsx"],"sourcesContent":["import {data} from '../data'\nimport { Search } from '../search/Search'\nimport {Filter} from '../filter/Filter'\nimport {States } from '../states/States'\nimport {useEffect, useState} from 'react'\nexport const Regions = ({DarkMode}) => {\n    const [country, setCountry] = useState(data);\n    const [searchCountry, setSearchCountry] = useState('');\n    const [Select,setSelect] = useState(\"\");\n    useEffect(() => {\n        \n    \n        if (Select === \"All\"){\n            setCountry(\n            data.filter((country) =>\n            country.name.toLowerCase().includes(searchCountry.toLowerCase())\n            ));\n        } else setCountry(\n            data.filter((country) =>\n            country.name.toLowerCase().includes(searchCountry.toLowerCase())\n            ).filter((country) => country.region.includes(Select))\n        )\n    }, [searchCountry,Select])\n    return(\n        <div className= {DarkMode ? \"regions-container dark-regions-container\": \"regions-container\"}>\n            <div className={DarkMode ?\"search-filter-container dark-search-filter-container\":\"search-filter-container\"}>\n             <Search setSearchCountry={setSearchCountry} DarkMode={DarkMode}/>\n             <Filter setFilterContainer={setSelect}/>\n             </div>\n             <div className={DarkMode ? \"states-wraper states-wraper-dark\": \"states-wraper\"} >\n                {country.map((country) => {\n                    return <States key={country.name} country={country} DarkMode={DarkMode}/>\n                })}\n            \n            \n            \n            </div>\n            \n            \n        </div>\n    )\n\n}"],"mappings":";;AAAA,SAAQA,IAAI,QAAO,SAAS;AAC5B,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAAQC,MAAM,QAAO,kBAAkB;AACvC,SAAQC,MAAM,QAAQ,kBAAkB;AACxC,SAAQC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAAA;AACzC,OAAO,MAAMC,OAAO,GAAG,QAAgB;EAAA;EAAA,IAAf;IAACC;EAAQ,CAAC;EAC9B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAACL,IAAI,CAAC;EAC5C,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACO,MAAM,EAACC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACvCD,SAAS,CAAC,MAAM;IAGZ,IAAIQ,MAAM,KAAK,KAAK,EAAC;MACjBH,UAAU,CACVT,IAAI,CAACc,MAAM,CAAEN,OAAO,IACpBA,OAAO,CAACO,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACP,aAAa,CAACM,WAAW,EAAE,CAAC,CAC/D,CAAC;IACN,CAAC,MAAMP,UAAU,CACbT,IAAI,CAACc,MAAM,CAAEN,OAAO,IACpBA,OAAO,CAACO,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACP,aAAa,CAACM,WAAW,EAAE,CAAC,CAC/D,CAACF,MAAM,CAAEN,OAAO,IAAKA,OAAO,CAACU,MAAM,CAACD,QAAQ,CAACL,MAAM,CAAC,CAAC,CACzD;EACL,CAAC,EAAE,CAACF,aAAa,EAACE,MAAM,CAAC,CAAC;EAC1B,oBACI;IAAK,SAAS,EAAGL,QAAQ,GAAG,0CAA0C,GAAE,mBAAoB;IAAA,wBACxF;MAAK,SAAS,EAAEA,QAAQ,GAAE,sDAAsD,GAAC,yBAA0B;MAAA,wBAC1G,QAAC,MAAM;QAAC,gBAAgB,EAAEI,gBAAiB;QAAC,QAAQ,EAAEJ;MAAS;QAAA;QAAA;QAAA;MAAA,QAAE,eACjE,QAAC,MAAM;QAAC,kBAAkB,EAAEM;MAAU;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QAClC,eACN;MAAK,SAAS,EAAEN,QAAQ,GAAG,kCAAkC,GAAE,eAAgB;MAAA,UAC3EC,OAAO,CAACW,GAAG,CAAEX,OAAO,IAAK;QACtB,oBAAO,QAAC,MAAM;UAAoB,OAAO,EAAEA,OAAQ;UAAC,QAAQ,EAAED;QAAS,GAAnDC,OAAO,CAACO,IAAI;UAAA;UAAA;UAAA;QAAA,QAAyC;MAC7E,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QAIA;EAAA;IAAA;IAAA;IAAA;EAAA,QAGJ;AAGd,CAAC;AAAA,GArCYT,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module"}